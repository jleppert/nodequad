{"name":"Nodequad","tagline":"Node library to communicate with aeroquad open source multirotor platform","body":"nodequad\r\n===============\r\n**Node library to communicate with AeroQuad open source multirotor platform.**\r\n\r\n*AeroQuad is a fully open source hardware and software platform for multirotor aircraft. More information can be found at <http://aeroquad.com>.*\r\n\r\nInstalling\r\n---------------\r\n\r\n\tnpm install nodequad\r\n\r\nA command line interface is provided to send commands and receive telemetry data. To ensure `nodequad` is in your path, install it globally with npm:\r\n\r\n\tnpm install -g nodequad\r\n\r\n\r\nGetting Started\r\n---------------\r\n* The AeroQuad manual, forum and project: <http://aeroquad.com>\r\n* Read a quick tutorial on how to use this library: <http://github.io/jleppert/nodequad/tutorial>\r\n* Look at generated library API Documentation at <http://github.io/jleppert/nodequad/docs>\r\n* Browse the examples under the examples directory of the project: <http://github.io/jleppert/nodequad/docs/examples>\r\n* A command line reference is available at <http://github.io/jleppert/nodequad/docs/bin/nodequad-cli>\r\n\r\nQuick Start\r\n---------------\r\n\r\nMake sure you have a working AeroQuad flight controller board and can connect to it via the USB connection or a wireless serial connection. For STM32 based flight controllers, you'll need to install the virtual com port driver under Windows, available here: <http://github.io/jleppert/nodequad/dist/VCP_V1.3.1_Setup.exe>.\r\n\r\nNodequad also uses new ES6 harmony features such as `Object.observe`, which requires node >= 0.11.13. You can obtain a compatible node version here: <http://blog.nodejs.org/2014/05/02/node-v0-11-13-unstable>.\r\n\r\nUsage Example\r\n----------------\r\n\r\n\tvar Nodequad = require('nodequad');\r\n\tvar vehicle = new Nodequad();\r\n\r\n\tvehicle.probe.andConnect();\r\n\r\n\tvehicle.on('driver.state.connected', function() {\r\n\t\tconsole.log('Connected to aircraft!');\r\n\r\n\t\tconsole.log('Reading aircraft flight configuration...');\r\n\t\tvehicle.sync('config.vehicle.*');\r\n\r\n\t\tconsole.log('Changing aircraft PID rate pid.');\r\n\t\tvehicle.config.pid.rate.roll = new AeroQuad.PID(1.0, 1.1, 1.2);\r\n\r\n\t\tconsole.log('Monitoring GPS sensor data...');\r\n\t\tvehicle.stream('state.gps');\r\n\t});\r\n\r\n\r\n\t// monitor changes in state\r\n\tvehicle.on('state.**', function(key, data) {\r\n\t\tconsole.log('Aircraft state changed:', key, value);\r\n\t});\r\n\r\n\t// monitor when configuration values get changed\r\n\tvehicle.on('config.**', function(key, data) {\r\n\t\tconsole.log('Aircraft configuration changed:', key, value);\r\n\t});\r\n\r\n\t// monitor communication events from the underlying driver, such as connection, disconnection, etc.\r\n\tvehicle.on('driver.**', function() {\r\n\t\tconsole.log('Communication event occured:', this.event);\r\n\t});\r\n\r\nRunning Tests\r\n----------------\r\n\r\n\tnpm test\r\n\r\nTo view/generate test coverage report <http://github.io/jleppert/nodequad/test/coverage>:\r\n\r\n\tnpm test-coverage\r\n\r\nContributing\r\n----------------\r\n\r\n* Setup a branch for what you are working on:\r\n\r\n\t`git checkout -b my-new-feature`\r\n\r\n* Test your changes with existing tests\r\n\r\n\t`npm test`\r\n\r\n* Add unit tests under `tests/`\r\n* Add a description of your changes to the `CHANGELOG.md`. Link to any associated issue.\r\n* Add an issue and tag it `pull request`, including a link to any associated issue. Please send pull requests from your branch so merging is easy.\r\n\r\n\r\nReporting Bugs & Feature Requests\r\n----------------\r\n\r\nPlease use github to report all bugs and feature requests at <http://github.com/jleppert/nodequad/issues>.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}